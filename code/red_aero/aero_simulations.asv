close all;
clear all;
clc;

%% Resolvemos los problemas por separado para calcular el punto de utopía
%Problema del operador:
%op_obj = operation_costs
%obj_val = 0
%Problema de los pasajeros:
%pax_obj = (distances + prices) + entropies + congestion
%obj_val. Se calcula para un presupuesto dado. En este caso daremos un
%valor a beta, calculamos el presupuest obtenido y lo mantenemos todo el
%tiempo.
betas = [5,10,20,50];
lams = [100,300,1000];
%betas a simular despues con alfa = 1: 0.5 hasta 2, de 0.1 en 0.1), subir
%threshold para matar arcos hasta 1 o 2 (preguntar), los mas bajos salen 16, pero en la iter 9 había 220 mayores que 1, y 376 al quitar coste fijo con 0.1 de threshold.
budgets = zeros(length(betas),1);
cvx_solver_settings -clearall
cvx_solver mosek
cvx_precision default
cvx_save_prefs 
num_workers = 2;
% Inicia el parpool para parfor
parpool('local', num_workers); % num_workers es el número de trabajadores a utilizar
parfor bb=1:length(betas)
    for ll=1:length(lams)
        eps = 1e-3;
        alfa = 0.5;
        lam = lams(ll);
        beta = betas(bb);
        dm_pax = 1; %calcular con análisis de utopía
        dm_op = 1; %calcular con análisis de utopía
        [s,s_prim,delta_s,delta_s_prim,a,f,fext,fij,comp_time,budget,obj_val,...
        pax_obj,op_obj] = compute_sim(lam,beta,alfa,dm_pax,dm_op);
        disp(['nlinks =',num2str(sum(sum(a > 1)))]);
        
        disp(['budget = ',num2str(budget)]);
        budgets(bb) = budget;
        
        disp(['obj_val = ',num2str(obj_val),', pax_obj = ',num2str(pax_obj), ...
            ', op_obj = ',num2str(op_obj)]);
    end
end
% Cierra el parpool
delete(gcp);
%%
betas = [5,10,20,50];
lams = [100,300,1000];
[n,link_cost,station_cost,...
    station_capacity_slope,demand,prices,...
    op_link_cost,congestion_coef_airline, congestion_coef_airport,...
    travel_time,alt_time,alt_price,a_nom,tau,sigma,...
    a_max,trans_time,s_max] = parameters_aero_network();
for bb=1:length(betas)
    for ll=1:length(lams)
        beta_or = betas(bb);
        lam = lams(ll);
        filename = sprintf('./aero_results/prelim_sol_beta=%d_lam=%d.mat',beta_or,lam);
        load(filename);
        disp(['beta = ',num2str(beta_or)]);
        disp(['nlinks =',num2str(sum(sum(a > 1)))]);
        disp(['budget = ',num2str(budget)]);
        att_dem = sum(sum(demand.*f))/sum(sum(demand));
        disp(['att dem = ',num2str(att_dem)]);
    end
end
%% Functions
function budget = get_budget(s_prim,a,n,...
    station_cost,station_capacity_slope,link_cost,lam)
    budget = 0;
    for i=1:n
        if s_prim(i) > 1
            budget = budget + station_cost(i) + ...
                station_capacity_slope(i)*s_prim(i);
        end
        for j=1:n
            if a(i,j) > 1
                budget = budget + link_cost(i,j);
            end
        end
    end
end
function [obj_val,pax_obj,op_obj] = get_obj_val(alfa, op_link_cost,...
    congestion_coef_airline,congestion_coef_airport,travel_time,prices,alt_time,alt_price,a, ...
    s_prim,delta_s,delta_s_prim,fij,f,fext,demand,dm_pax,dm_op,coef_logit,trans_time)
    n = 25;
    pax_obj = 0;
    op_obj = 0;
    eps = 1e-2;
    op_obj = op_obj + 1e-8*(sum(sum(op_link_cost.*a))); %operational costs
    for i=1:n
        if s_prim(i) > eps
            pax_obj = pax_obj + 1e-8*inv_pos(congestion_coef_airline*delta_s(i) + 1e-3)...
                + 1e-8*inv_pos(congestion_coef_airport*delta_s_prim(i) + 1e-3);
        end
    end
    for o=1:n
        for d=1:n
            pax_obj = pax_obj + 1e-8*(demand(o,d).*prices(o,d).*sum(sum((travel_time+trans_time(:,:,o,d)).*fij(:,:,o,d).*coef_logit))); 
        end
    end
    pax_obj = pax_obj + 1e-8*(sum(sum(demand.*prices.*(alt_time+0.01.*alt_price).*fext.*coef_logit)));
    pax_obj = pax_obj + 1e-8*(sum(sum(demand.*prices.*(max(-entr(f),0) - f)))) + 1e-8*(sum(sum(demand.*prices.*0.01.*prices.*f.*coef_logit)));
    pax_obj = pax_obj + 1e-8*(sum(sum(demand.*prices.*(max(-entr(fext),0) - fext))));
    obj_val = (alfa/(dm_pax))*pax_obj + ((1-alfa)/(dm_op))*op_obj;
end
function [s,s_prim,delta_s,delta_s_prim,a,f,fext,fij,comp_time,budget,obj_val,...
    pax_obj,op_obj] = compute_sim(lam,beta_or,alfa,dm_pax,dm_op)
    [n,link_cost,station_cost,...
    station_capacity_slope,demand,prices,...
    op_link_cost,congestion_coef_airline, congestion_coef_airport,...
    travel_time,alt_time,alt_price,a_nom,tau,sigma,...
    a_max,trans_time,s_max] = parameters_aero_network();
    niters = 10;           
    eps = 1e-3;
    a_prev = 1e4.*ones(n);
    s_prev= 1e4.*ones(n,1);
    disp(['beta = ',num2str(beta_or),', lam = ',num2str(lam)]);
    tic;
    for iter=1:niters
        cvx_begin quiet
            variable s(n)
            variable s_prim(n)
            variable delta_s(n)
            variable delta_s_prim(n)
            variable a(n,n)
            variable f(n,n)
            variable fext(n,n)
            variable fij(n,n,n,n)
            coef_logit = 0.5;
            op_obj = 0;
            pax_obj = 0;
            bud_obj = 0;
            bud_obj = bud_obj + 1e-8*sum(station_capacity_slope'.*s_prim);
            op_obj = op_obj + 1e-8*(sum(sum(op_link_cost.*a))); %operation costs
            if iter < niters
                pax_obj = pax_obj + 1e-8*(sum(inv_pos(congestion_coef_airline.*delta_s + eps))) + 1e-8*(sum(inv_pos(congestion_coef_airport.*delta_s_prim + eps))); %congestion costs
                bud_obj = bud_obj + 1e-8*sum(sum((link_cost.*a.*(1./(a_prev+eps))))) + 1e-8*sum((station_cost'.*s_prim.*(1./(s_prev+eps)))); %fixed construction costs
                bud_obj = bud_obj + 1e-8*lam*sum(sum((link_cost.*a.*(1./(a_prev+eps))))) + 1e-8*lam*sum((station_cost'.*s_prim.*(1./(s_prev+eps)))); %fixed sparsity costs
            end
    
            for o=1:n
                for d=1:n
                    pax_obj = pax_obj + 1e-8*(demand(o,d).*prices(o,d).*sum(sum((travel_time+trans_time(:,:,o,d)).*fij(:,:,o,d).*coef_logit))); 
                end
            end
            pax_obj = pax_obj + 1e-8*(sum(sum(demand.*prices.*(alt_time+0.01.*alt_price).*fext.*coef_logit)));
            pax_obj = pax_obj + 1e-8*(sum(sum(demand.*prices.*(-entr(f) - f)))) + 1e-8*(sum(sum(demand.*prices.*0.01.*prices.*f.*coef_logit)));
            pax_obj = pax_obj + 1e-8*(sum(sum(demand.*prices.*(-5.*entr(0.2.*fext) - fext))));
    
    
            if iter == niters
                for i=1:n
                    if s_prev(i) >= eps
                        pax_obj = pax_obj + 1e-8*(sum(inv_pos(congestion_coef_airline.*delta_s(i) + eps))) + 1e-8*(sum(inv_pos(congestion_coef_airport.*delta_s_prim(i) + eps))); %congestion costs
                    end
                 end
            end
            obj = beta_or*bud_obj + (alfa/(dm_pax))*pax_obj + ((1-alfa)/(dm_op))*op_obj;
            minimize obj
            % constraints
            s >= 0;
            s_prim >= 0;
            delta_s >= 0;
            a >= 0;
            f >= 0;
            f <= 1;
            fij >= 0;
            fij <= 1;
            fext >= 0;
            fext <= 1;
            s_prim == s + delta_s;
            s_max == s_prim + delta_s_prim;
    
            for i=1:n
                for j=1:n
                    squeeze(sum(sum(squeeze(permute(fij(i,j,:,:),[3 4 1 2]).*demand)))) <= tau.*a(i,j).*a_nom; %multiplicar por demanda
                end
            end
            for i=1:n
                sigma*sum(a(:,i)) <= s(i)
            end
            sum(sum(a)) <= a_max;
            for o=1:n
                for d=1:n
                    sum(fij(o,:,o,d)) == f(o,d);
                end
            end
            for i=1:n
                a(i,i) == 0;
            end
            
            for o=1:n
                squeeze(sum(fij(o,:,o,[1:(o-1),(o+1):n]),2)) - squeeze(sum(permute(fij(:,o,o,[1:(o-1),(o+1):n]),[2,1,3,4]),2)) == transpose(1 - fext(o,[1:(o-1),(o+1):n])); 
            end
            for d=1:n
                squeeze(sum(fij(d,:,[1:(d-1),(d+1):n],d),2)) - squeeze(sum(permute(fij(:,d,[1:(d-1),(d+1):n],d),[2,1,3,4]),2)) == -1 + fext([1:(d-1),(d+1):n],d);
            end
            for i=1:n
                fij(i,i,:,:) == 0;
                squeeze(sum(fij(i,:,[1:(i-1),(i+1):n],[1:(i-1),(i+1):n]),2)) - squeeze(sum(permute(fij(:,i,[1:(i-1),(i+1):n],[1:(i-1),(i+1):n]),[2,1,3,4]),2)) == 0;
            end
            for o=1:n
                fext(o,o) == 0;
                f(o,o) == 0;
                fij(:,o,o,:) == 0;
            end
            for d=1:n
                fij(d,:,:,d) == 0;
            end
            for o=1:n
                for d=1:n
                    if o ~= d
                        f(o,d) + fext(o,d) == 1;
                    end
                end
            end
            for o=1:n
                for d=1:n
                    prices(o,d)*demand(o,d)*f(o,d) >= sum(sum(demand(o,d).*fij(:,:,o,d).*op_link_cost./a_nom));
                    %ver eso
                end
            end
            if iter == niters
                for i=1:n
                    if s_prev(i) <= 1
                        s_prim(i) == 0;
                    end
                    for j=1:n
                        if a_prev(i,j) <= 1
                            a(i,j) == 0;
                         end
                     end
                 end
             end
    
        cvx_end
        a_prev = a;
        s_prev = s_prim;
        disp(['iter = ',num2str(iter),', beta = ',num2str(beta_or),', lam = ',num2str(lam),', nlinks =',num2str(sum(sum(a > 1)))]);
        if (sum(sum(a > 1)) < 1)
            disp(['abandono para beta = ',num2str(beta_or),', lam = ',num2str(lam)]);
            break;
        end
    end
    comp_time = toc;
    
    
    budget = get_budget(s_prim,a,n,...
    station_cost,station_capacity_slope,link_cost,lam);
    
    [obj_val,pax_obj,op_obj] = get_obj_val(alfa, op_link_cost,...
    congestion_coef_airline,congestion_coef_airport,travel_time,prices,alt_time,alt_price,a, ...
    s_prim,delta_s,delta_s_prim,fij,f,fext,demand,dm_pax,dm_op,coef_logit,trans_time);
    filename = sprintf('./aero_results/prelim_sol_beta=%d_lam=%d.mat',beta_or,lam);
    save(filename,'s','s_prim','delta_s','delta_s_prim', ...
        'a','f','fext','fij','obj_val','pax_obj','op_obj','comp_time','budget');
end
function [n,link_cost,station_cost,...
    station_capacity_slope,demand,prices,...
    op_link_cost,congestion_coef_airline, congestion_coef_airport,...
    travel_time,alt_time,alt_price,a_nom,tau,sigma,...
    a_max,trans_time,s_max] = parameters_aero_network()
    n = 25; 
    CAB_data = readtable('./CAB_data.xlsx');
    coor_x = table2array(CAB_data(1:25,1));
    coor_y = table2array(CAB_data(1:25,2));
    demand = table2array(CAB_data(26:50,1:25));
    distance = zeros(n);
    for i=1:n
        distance(i,i) = 0;
        for j=i+1:n
            distance(i,j) = sqrt((coor_x(i) - coor_x(j)).^2 + ...
            (coor_y(i)-coor_y(j)).^2);
            distance(j,i) = distance(i,j);
        end
    end
    
    %cost of using the alternative network for each o-d pair
    rng(1,"twister"); %seed
    alt_cost = abs(distance + 3e2.*randn(n)); 
    
    %fixed cost for constructing links
    link_cost = 1e3.*ones(n); %poner muy pequeño, si no forzar sparsity aparte.
    %digo que es el estudio de la ruta
    
    %fixed cost for constructing stations
    station_cost = 2e3.*ones(1,n); %oficinas, tasas del aeropuerto 
    
    station_capacity_slope = 4*5e2.*ones(1,n); %500 e dia por estacionamiento aeronaves

    % Congestion Coefficients
    congestion_coef_airline = 0.1;
    congestion_coef_airport = 0.1;
    
    % Prices
    prices = (distance).^(0.7);
    
    % Travel Time
    travel_time = distance ./ 450 + 0.6; % Time in hours
    
    % Alt Time
    alt_time = alt_cost ./ 450 + 0.6; % Time in hours

    % Op Link Cost
    op_link_cost = 5e3.*travel_time; %5k/hora
    trans_time = ones(n,n,n,n);
    
    for o=1:n
        for i=1:n 
            trans_time(:,:,o,o) = 0;
            trans_time(i,i,:,:) = 0;
            trans_time(o,i,o,:) = 0;
        end
    end
    alt_price = (alt_cost).^(0.7); %price
    
    
    a_nom = 220;             
    
    tau = 0.85;
    sigma = 0.18; %sigma en formulacion, ver guille. 14,15 y 16, vuelos totales.
    a_max = 1e9;
    s_max = 1e5;
end